/********************************************************************************
 Copyright (C) 2012 Hugh Bailey <obs.jim@gmail.com>

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
********************************************************************************/


uniform Texture2D diffuseTexture;
uniform float4 outputColor;
uniform float4 keyBaseColor;
uniform float4 chromaKey;
uniform float2 pixelSize;
uniform float keySimilarity;
uniform float keyBlend;
uniform float keySpill;
uniform float gamma;

SamplerState textureSampler
{
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

struct VertData
{
    float4 pos      : SV_Position;
    float2 texCoord : TexCoord0;
};

float getSampleDist(float3 chromaKey, float3 rgb)
{
    const float4x4 yuvMat = {0.182586, -0.100644,  0.439216, 0.0,
                             0.614231, -0.338572, -0.398942, 0.0,
                             0.062007,  0.439216, -0.040274, 0.0,
                             0.062745,  0.501961,  0.501961, 1.0};

    //a nice quick colorspace conversion
    float4 yuvx = mul(float4(rgb.rgb, 1.0), yuvMat);

    return distance(chromaKey.yz, yuvx.yz*2.0);
}

float4 main(VertData input) : SV_Target
{
    float4 rgbx = diffuseTexture.Sample(textureSampler, input.texCoord).bgra;

    //-----------------------------

    float distVal = getSampleDist(chromaKey, rgbx.rgb);
    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord-pixelSize).bgr);
    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord-float2(pixelSize.x, 0.0)).bgr);
    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord-float2(pixelSize.x, -pixelSize.y)).bgr);

    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord-float2(0.0, pixelSize.y)).bgr);
    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord+float2(0.0, pixelSize.y)).bgr);

    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord+float2(pixelSize.x, -pixelSize.y)).bgr);
    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord+float2(pixelSize.x, 0.0)).bgr);
    distVal += getSampleDist(chromaKey, diffuseTexture.Sample(textureSampler, input.texCoord+pixelSize).bgr);

    distVal /= 9.0;

    //-----------------------------

    float baseMask = distVal - keySimilarity;
    float fullMask = pow(saturate(baseMask/keyBlend), 1.5);
    float spillVal = pow(saturate(baseMask/keySpill), 1.5);

    //-----------------------------

    rgbx.a = fullMask;

    float3 spillDesaturation = rgbx.rgb-keyBaseColor.rgb;
    spillDesaturation.rgb += (keyBaseColor.r+keyBaseColor.g+keyBaseColor.b)*0.333333333;
    rgbx.rgb = saturate(spillDesaturation)*(1.0-spillVal) + rgbx.rgb*spillVal;

	rgbx.rgb = pow(rgbx.rgb, gamma);

    return rgbx * outputColor;
}
